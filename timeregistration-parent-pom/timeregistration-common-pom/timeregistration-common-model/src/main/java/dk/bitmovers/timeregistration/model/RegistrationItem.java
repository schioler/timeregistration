package dk.bitmovers.timeregistration.model;

// Generated Jun 1, 2015 4:47:34 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * RegistrationItem generated by hbm2java
 */
@Entity
@Table(name = "registration_item", catalog = "timereg")
public class RegistrationItem implements java.io.Serializable {

	private Integer id;
	private ClientProject clientProject;
	private ProviderAccount providerAccount;
	private User user;
	private Date created;
	private String isActive;
	private Date ended;
	private String name;
	private Set<RegistrationSubmitted> registrationSubmitteds = new HashSet<RegistrationSubmitted>(
			0);
	private Set<RegistrationEvent> registrationEvents = new HashSet<RegistrationEvent>(
			0);

	public RegistrationItem() {
	}

	public RegistrationItem(ClientProject clientProject,
			ProviderAccount providerAccount, User user, Date created,
			String isActive, String name) {
		this.clientProject = clientProject;
		this.providerAccount = providerAccount;
		this.user = user;
		this.created = created;
		this.isActive = isActive;
		this.name = name;
	}

	public RegistrationItem(ClientProject clientProject,
			ProviderAccount providerAccount, User user, Date created,
			String isActive, Date ended, String name,
			Set<RegistrationSubmitted> registrationSubmitteds,
			Set<RegistrationEvent> registrationEvents) {
		this.clientProject = clientProject;
		this.providerAccount = providerAccount;
		this.user = user;
		this.created = created;
		this.isActive = isActive;
		this.ended = ended;
		this.name = name;
		this.registrationSubmitteds = registrationSubmitteds;
		this.registrationEvents = registrationEvents;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "client_project_id", nullable = false)
	public ClientProject getClientProject() {
		return this.clientProject;
	}

	public void setClientProject(ClientProject clientProject) {
		this.clientProject = clientProject;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "provider_account_id", nullable = false)
	public ProviderAccount getProviderAccount() {
		return this.providerAccount;
	}

	public void setProviderAccount(ProviderAccount providerAccount) {
		this.providerAccount = providerAccount;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "is_active", nullable = false, length = 2)
	public String getIsActive() {
		return this.isActive;
	}

	public void setIsActive(String isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ended", length = 19)
	public Date getEnded() {
		return this.ended;
	}

	public void setEnded(Date ended) {
		this.ended = ended;
	}

	@Column(name = "name", nullable = false, length = 60)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "registrationItem")
	public Set<RegistrationSubmitted> getRegistrationSubmitteds() {
		return this.registrationSubmitteds;
	}

	public void setRegistrationSubmitteds(
			Set<RegistrationSubmitted> registrationSubmitteds) {
		this.registrationSubmitteds = registrationSubmitteds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "registrationItem")
	public Set<RegistrationEvent> getRegistrationEvents() {
		return this.registrationEvents;
	}

	public void setRegistrationEvents(Set<RegistrationEvent> registrationEvents) {
		this.registrationEvents = registrationEvents;
	}

}
